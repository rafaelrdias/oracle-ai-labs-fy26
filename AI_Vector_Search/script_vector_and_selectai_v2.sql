/*

Pre requisito 
	
	https://docs.oracle.com/en-us/iaas/Content/generative-ai/iam-policies.htm

OCI deve ter associacao a regiao referenciada no endpoint

	Releases: https://docs.oracle.com/en-us/iaas/releasenotes/services/generative-ai/

Retired (CUIDADO):

	https://docs.oracle.com/en-us/iaas/Content/generative-ai/deprecating.htm

LLMs atuais:  https://docs.oracle.com/en-us/iaas/Content/generative-ai/pretrained-models.htm
	
SQL Web Password:  EventoArena#2025
    
*/


--
-- VECTOR
--
/*
Permissoes:
    grant execute on DBMS_CLOUD_AI to POC;
    grant execute on DBMS_CLOUD to POC;

Permissoes usadas para frente de Vector: 
    grant execute on DBMS_VECTOR to POC;
    grant execute on DBMS_VECTOR_CHAIN to POC;	
    grant execute on DBMS_NETWORK_ACL_ADMIN to POC;
    grant create mining model to POC;
    grant read, write on directory DATA_PUMP_DIR to POC	;
*/

--
-- Credencial diferente da usada pelo SelectAI, pois temos indicacao do compartment id. 
-- Mas ha compatibilidade entre as formas de uso, desde que compartment_id seja apontado no json de entrada 
--
declare
  jo json_object_t;
begin
  jo := json_object_t();
  jo.put('user_ocid','ocid1.user.oc1..aaaaaaaa4eljth7mjr6f4uftht67rzwxgn6xovzfavqslynrtc7y6sdkkt5a');
  jo.put('tenancy_ocid','ocid1.tenancy.oc1..aaaaaaaaoi6b5sxlv4z773boczybqz3h2vspvvru42jysvizl77lky22ijaq');
  jo.put('compartment_ocid','ocid1.compartment.oc1..aaaaaaaayv4jpgnurtdpxwfy3t2tak6akpyh6jgunlc6pdmilqv5f2s5nevq');
  jo.put('private_key','MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC9XGAJFv+pCmEw
tV8qzvE510R9bxZsS4sKimHULaM5oSNbwjM0d/5bWR6x39RkXw/nKTdSRrbVEbHO
Cut+WfApIsfGfqqMq07poJujhFTJo9tAiMhtT5kL+oLhrGBcfaWmEJ1vBm4uIUxq
lKRrQAp5lrJ3ggDpZMTdjexostSnYg67FeTxs+Y7nJBUvaCpw1Z4OfWt09QpnGDc
6QExiHqFuYSjmFKV8PsCqjK/9nPqitgqWY43FjdhjdeVLtruxgZ3E/if+2982gDS
2bOOYyGPIf83jyqqw3IEFC6WqJZifPPjn0Dnalmaf10bvw97jJ30U3YgsMh3dVJg
EnGoB4YBAgMBAAECggEAQOGAyjyGFq5GxMCwPeOwBWh7wBqq7SopFtB5WpDUh29t
xQfSMZ0Xmsb7XGjbxhRIR6T4nok6JeEtMfLN43n/bqjLGHjYCOC9ZhEwoqM5xekN
u5viSInoX5FS/O3qCmbGthKlTqA+ajHgk/ggKdtEe4ql1YrGszFivqLdKLZ1ZG/+
JpO7o1/6uvCpuV/Qe5GeoOl6jHCXId+RXbeXY4WRmNmGV4hbgTQzAV/86orjsIWM
rUGPh2JcHQGVRe+V208YLUK+I6OO0gkcp/xX4CntrdhtadPg3e6crarDrlmL79a4
wzglakcLewwWRtNBUA5phEhwwlDi+H4BMbRifs20nQKBgQDxUndvwh4Bs8ravyyx
oAxpvjDTLRtxfzuCSN+aLQ5D8xjrQRz05byLFhNzlRJpSOExPLW/xsf6AMVNDLrV
zeNP0kNh+PjQB1bJCiIBcpOW4HLjDUnNcKSMU5sT5ZLuYnvDuBhtbJ0TBklCslCl
3sltWqU6MjyJj6OY6+NNg04H5wKBgQDI4NbjXwoBoxuQ62gHtFWeV3cNzN/hw+tK
5FTclDdknWwb1FfIylOx+Ps6ZtlBAfAYDvYHotKm3QqvImWW2hPA0gq0PnKVLisj
+uoQqMULKHa7MFsEcQU6QXL9VX1gHW71HZ52smuHpwQNCjr7o4mcQmvKgodiT7lx
3IzCrYGl1wKBgQDdoh2reJ7SdWvTJ01G/XUpENIKwRy5Sl8/MuqZ0NOPOI8kUTLl
ALH/E5Fd0AWOyK556AYMUeaMB3UtZImbn3IrdzMHof/yHytnjHTa234NTap2OVgU
5GVbs9Vzmp8tbSm6ATP+G4jPVjCmntpO3KQmWN/y6PyMYm2gHtUt9XAO9QKBgF5/
VteTZ/OpNViRRVkKfpSEdN8rF87vCYsrqrgxiXVtkOPumnU8qO66QAUTSPSJ4taO
gzLIZ+xTY6lLtxql8FDu/lYYYnLHS0gby2yW2EsNd/1LHCYUvO7QxzVhuB80+XOZ
wWf5OxiPexpfS6wBHMVDgc28Zc/bzVNA+37BfJH1AoGAB66SvCMfANwYUsGvUH0F
O9ERyvG0AR0O6dcSZCKXcqJ+tcnQI8NE5dpH4IlEYlyRoMuqSVwxwtYAgPKrpzSi
Q2IVCekZjutlcaBBBgixSNQwRvMg3aqoo5pwcD2V97Rbljg9UWBgty7BE0X+B7xy
4/gNpE9A3Jnl7DYym58D+hY=');
  jo.put('fingerprint','15:11:f0:b2:79:11:ac:01:31:44:b9:b1:88:a8:4c:d8');
  dbms_output.put_line(jo.to_string);
  dbms_vector.create_credential(
    credential_name   => 'OCI_CRED',
    params            => json(jo.to_string));
end;
-- DDIC:  select * from user_credentials


--
-- Copiando arquivos do bucket para directory do Autonomous
-- 
BEGIN
   DBMS_CLOUD.GET_OBJECT(
   credential_name => 'OCI_CRED',
   object_uri => 'https://idi1o0a010nx.objectstorage.sa-saopaulo-1.oci.customer-oci.com/n/idi1o0a010nx/b/bucket-evento0611/o/EvolucaoHistoriaFutebol.pdf',
   directory_name => 'DATA_PUMP_DIR');
END;

--
-- Criacao de tabela para armazenar PDFs 
--
-- 
CREATE TABLE IF NOT EXISTS "TB_DATA"
    ( 
    ID    INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY 
          ( START WITH 1 CACHE 20 ) PRIMARY KEY, 
    file_name      VARCHAR2 (900) , 
    file_size      INTEGER , 
    file_type      VARCHAR2 (100) , 
    file_content   BLOB
    ) 

--
-- Inserindo PDFs na tabela
--
insert into "TB_DATA"(file_name,file_size,file_type,file_content)  
values  ('EvolucaoHistoriaFutebol.pdf',
         dbms_lob.getlength(to_blob(bfilename('DATA_PUMP_DIR', 'EvolucaoHistoriaFutebol.pdf'))),
         'PDF', 
         to_blob(bfilename('DATA_PUMP_DIR', 'EvolucaoHistoriaFutebol.pdf') )
        );

--
-- Copiar modelo de machine learning para um directory de banco DATA_PUMP_DIR
--
-- Fonte de modelos:   https://blogs.oracle.com/machinelearning/post/oml4py-leveraging-onnx-and-hugging-face-for-advanced-ai-vector-search
--                     https://docs.oracle.com/en/database/oracle/oracle-database/23/vecse/convert-pretrained-models-onnx-model-end-end-instructions.html
--               ou:   https://huggingface.com/models
-- (new)               https://blogs.oracle.com/machinelearning/post/use-our-prebuilt-onnx-model-now-available-for-embedding-generation-in-oracle-database-23ai
--
-- Importar modelo ONNX para o banco
--   referencias https://docs.oracle.com/en/database/oracle/oracle-database/23/arpls/dbms_vector1.html#GUID-7F1D7992-D8F7-4AD9-9BF6-6EFFC1B0617A
--
-- https://docs.oracle.com/en/database/oracle/oracle-database/23/vecse/load_onnx_model_cloud.html
--
begin
 DBMS_VECTOR.LOAD_ONNX_MODEL_CLOUD(
    model_name => 'paraphrase_multi',
    credential => 'OCI_CRED', 
    uri => 'https://idi1o0a010nx.objectstorage.sa-saopaulo-1.oci.customer-oci.com/n/idi1o0a010nx/b/bucket-evento0611/o/ONNX/paraphrase-multilingual-mpnet-base-v2.onnx',
    metadata => JSON('{"function" : "embedding", "embeddingOutput" : "embedding" , "input": {"input": ["DATA"]}}')
);
END;

--
-- primeiro teste
--
SELECT VECTOR_EMBEDDING(  paraphrase_multi   USING 'minha primeira vetorizacao' AS data   ) as embedding 

        
--
-- 1 EXTRACAO DE TEXTOS DO PDF
--
SELECT dbms_vector_chain.utl_to_text(dt.file_content)
FROM  TB_DATA DT

--
-- 2 EXTRACAO DE CHUNKS DO TEXTO ACIMA  https://docs.oracle.com/en-us/iaas/Content/generative-ai/chat-models.htm
-- ATENCAO:  https://docs.oracle.com/en/database/oracle/oracle-database/23/vecse/explore-chunking-techniques-and-examples.html
--           https://docs.oracle.com/en/database/oracle/oracle-database/23/sqlrf/vector_chunks.html	  
--           https://docs.oracle.com/en/database/oracle/oracle-database/23/vecse/convert-file-text-chunks-embeddings-oracle-database.html
--
SELECT C.*
FROM TB_DATA D, VECTOR_CHUNKS(    dbms_vector_chain.utl_to_text(D.file_CONTENT)  
                         BY words MAX 60 OVERLAP 30 
                         SPLIT BY RECURSIVELY  normalize  all ) C
where d.file_name = 'EvolucaoHistoriaFutebol.pdf'   

--
-- 3 GERACAO FINAL DO EMBEDDING (VETOR)
--
select  dt.id, 
        dt.file_name , 
        embed_id, 
        text_chunk, 
        embed_vector 
 from TB_DATA dt
             CROSS JOIN TABLE(
                 dbms_vector_chain.utl_to_embeddings(
                     dbms_vector_chain.utl_to_chunks(
                         dbms_vector_chain.utl_to_text(   dt.file_content ), 
                         json('{"by":"words","max":"200","split":"sentence","normalize":"all","overlap":40}')
                     ),
                     json('{"provider":"database", "model":"PARAPHRASE_MULTI"}')
                 )
             )  t
             CROSS JOIN JSON_TABLE(
                 t.column_value, 
                 '$[*]' COLUMNS (
                     embed_id NUMBER PATH '$.embed_id',
                     text_chunk VARCHAR2(4000) PATH '$.embed_data',
                     embed_vector CLOB PATH '$.embed_vector'
                 )
         ) AS et

--
-- etapa 3: aplicacao do modelo de machine learning
-- 
CREATE TABLE IF NOT EXISTS "TB_VECTOR_DATA"
  (    "VEC_ID"   NUMBER(*,0) NOT NULL ENABLE, 
  "SOURCE" VARCHAR2(400),
  "EMBED_ID"      NUMBER, 
  "EMBED_DATA"    VARCHAR2(4000), 
  "EMBED_VECTOR"  VECTOR,
  FOREIGN KEY (VEC_ID) REFERENCES TB_DATA(ID)
  )
   
--
-- gravacao do vector em tabela de todo conteudo de TB_DATA
--

INSERT INTO "TB_VECTOR_DATA"
select  dt.id, 
        dt.file_name , 
        embed_id, 
        text_chunk, 
        embed_vector
 from TB_DATA dt
             CROSS JOIN TABLE(
                 dbms_vector_chain.utl_to_embeddings(
                     dbms_vector_chain.utl_to_chunks(
                         dbms_vector_chain.utl_to_text(   dt.file_content ), 
                         json('{"by":"words","max":"100","split":"sentence","normalize":"all","overlap":40}')
                     ),
                     json('{"provider":"database", "model":"PARAPHRASE_MULTI"}')
                 )
             )  t
             CROSS JOIN JSON_TABLE(
                 t.column_value, 
                 '$[*]' COLUMNS (
                     embed_id NUMBER PATH '$.embed_id',
                     text_chunk VARCHAR2(4000) PATH '$.embed_data',
                     embed_vector CLOB PATH '$.embed_vector'
                 )
         ) AS et;
		 

--
-- exemplo de pesquisa por similaridade
--
-- VECTOR_EMBEDDING: https://docs.oracle.com/en/database/oracle/oracle-database/23/vecse/generate-vector-embeddings-node.html
--                   https://docs.oracle.com/en/database/oracle/oracle-database/23/sqlrf/vector_embedding.html
--
-- VECTOR_DISTANCE:  https://docs.oracle.com/en/database/oracle/oracle-database/23/sqlrf/vector_distance.html
--
-- COSINE/EUCLIDEAN_SQUARED:  https://docs.oracle.com/en/database/oracle/oracle-database/23/vecse/cosine-similarity.html
--
--
--
SELECT source, embed_data, embed_id 
FROM TB_VECTOR_DATA,
     (SELECT VECTOR_EMBEDDING(  PARAPHRASE_MULTI   USING 'Quando se iniciou o campeonato nacional?' AS data   ) as embedding ) query_vector
ORDER BY VECTOR_DISTANCE(  EMBED_VECTOR , query_vector.embedding, EUCLIDEAN_SQUARED    )
FETCH FIRST 4 ROWS ONLY  

--
-- PL/SQL para usar pesquisa por similaridade + solucao de GenerativeAI 
--
create or replace FUNCTION generate_text_response_gen(p_user_question VARCHAR2) 
RETURN CLOB IS
  messages CLOB;
params_genai CLOB;
  output CLOB;
BEGIN

  for message_cursor in (
                            SELECT embed_data
                          FROM TB_VECTOR_DATA,
                                   (SELECT VECTOR_EMBEDDING( PARAPHRASE_MULTI  USING p_user_question AS data) as embedding) query_vector
                            ORDER BY VECTOR_DISTANCE(EMBED_VECTOR, query_vector.embedding, COSINE)
                            FETCH APPROX FIRST 4 ROWS ONLY
                ) loop

      -- augmented prompt atraves do vetor criado no banco
      messages := messages || '{"message": "' || message_cursor.embed_data || '"},' || CHR(10);

  END LOOP;
  
  --  
  -- ajustando JSON para prompt
  --
  messages := messages || '{"Question": "' || p_user_question  || '"},' || CHR(10);
  messages := RTRIM(messages, ',' || CHR(10));

  -- 
  -- pre requisito sao as credenciais definidas com nome OCI_CRED criadas a partir de dbms_vector.create_credential
  --
  -- para montar request body abaixo:  https://docs.oracle.com/en-us/iaas/api/#/en/generative-ai-inference/20231130/datatypes/GenerateTextDetails
  --
  	
	 params_genai := '{
		"provider" : "ocigenai",
		"credential_name" : "OCI_CRED",
		"url" : "https://inference.generativeai.sa-saopaulo-1.oci.oraclecloud.com/20231130/actions/chat",
		"model": "meta.llama-3.3-70b-instruct" }';

  -- 
  -- chamada POST para REST de GenAI co RAG
  -- https://docs.oracle.com/en/database/oracle/oracle-database/23/arpls/dbms_vector1.html#GUID-EA78DFB6-D951-43D1-8ECB-DD6D21C6F6A6
  --
  output := dbms_vector_chain.utl_to_generate_text(messages, json(params_genai));
  dbms_output.put_line(output);
  
  -- Return the generated text
  RETURN output;

END;


--
-- executando funcao para chamada REST ao LLM com RAG
--
select generate_text_response_gen( 'Quando se iniciou o campeonato nacional?'  )  



--
-- SELECT AI
--

/*
Seguranca

    OCI Policy (https://www.oracle.com/artificial-intelligence/generative-ai/generative-ai-service/faq/#:~:text=All%20data%20sent%20to%20the,seen%20by%20any%20other%20customer ) 
    
    “All data sent to the OCI Generative AI service stays with Oracle. This includes data you may use to 
    fine-tune a model as well as prompts and responses. Your data isn’t sent to Cohere, Meta, or any other
    model provider, and it can’t be seen by anyother customer.” “All data sent to the OCI Generative AI 
    service is secure and private. No data is shared with Cohere or Meta.”
    
Pre requisito para usar SelectAI numa nova conta OCI
	
	https://docs.oracle.com/en-us/iaas/Content/generative-ai/iam-policies.htm

Exemplos de SelectAI

	https://docs.public.content.oci.oraclecloud.com/en-us/iaas/autonomous-database-serverless/doc/examples-using-select-ai.html#GUID-67876E24-06F5-4642-B480-505758969DB7
    https://blogs.oracle.com/datawarehousing/post/how-to-help-ai-models-generate-better-natural-language-queries-in-autonomous-database

OpenAI, Azure, Cohere, Meta:  

    https://docs.oracle.com/en/cloud/paas/autonomous-database/serverless/adbsb/select-ai-manage-profiles.html#GUID-3721296F-14A1-428A-B464-7FA25E9EC8F3

*/


--
-- Dados utilizados para criacao da tabela:  https://www.football-data.co.uk/brazil.php
--

/*
Permissoes:
    grant execute on DBMS_CLOUD_AI to POC;
    grant execute on DBMS_CLOUD to POC;

*/

COMMENT ON TABLE TB_RESULT is 'tabela com informações dos resultados dos jogos do campeonato brasileiro, de 2012 até 2025';
COMMENT ON COLUMN TB_RESULT.COUNTRY IS 'País onde foi realizado o jogo ';
COMMENT ON COLUMN TB_RESULT.LEAGUE IS 'Definição da liga onde os times estão classificados' ;
COMMENT ON COLUMN TB_RESULT.SEASON IS 'Ano de referência';
COMMENT ON COLUMN TB_RESULT.DATE_RW IS 'Data e horário do jogo';
COMMENT ON COLUMN TB_RESULT.HOME IS 'Nome do time. Coluna "RES" descreve este time como "H"';
COMMENT ON COLUMN TB_RESULT.AWAY IS 'Nome do time. Coluna "RES" descreve este time como "A"';
COMMENT ON COLUMN TB_RESULT.HG IS 'Quantidade de gols realizado. Coluna "RES" descreve este time como "H"';
COMMENT ON COLUMN TB_RESULT.AG IS 'Quantidade de gols realizado. Coluna "RES" descreve este time como "A"';
COMMENT ON COLUMN TB_RESULT.RES IS '';

alter table TB_RESULT add constraint pk_tb_result primary key (DATE_RW,HOME,AWAY)

--
-- Confirmando credenciais existentes. Usaremos a mesma criada para o Vector
--
/*
select *  from USER_CLOUD_AI_PROFILES;
select * from USER_CLOUD_AI_PROFILE_ATTRIBUTES;
*/

-- Criando Profiles do Select IA: definir credencial (ponte banco-LLM), tabelas (escopo de uso), parametros do LLM
 
-- Using llama
--
-- https://docs.oracle.com/en-us/iaas/Content/generative-ai/pretrained-models.htm
-- https://docs.oracle.com/pt-br/iaas/Content/generative-ai/pay-on-demand.htm
--
--  https://github.com/meta-llama/llama-models/blob/main/models/llama3_3/MODEL_CARD.md
--
begin
  dbms_cloud_ai.drop_profile(
        profile_name => 'PROF_LLAMA_V1');
end;

declare
  v_owner varchar2(20) := SYS_CONTEXT ('USERENV', 'SESSION_USER');
begin

    dbms_cloud_ai.create_profile(
        profile_name => 'PROF_LLAMA_V1',
        attributes =>
            '{"provider": "oci",
            "credential_name": "OCI_CRED",
            "oci_compartment_id":  "ocid1.compartment.oc1..aaaaaaaa6xzytlytoqvmboazzcoaqele4yu77fiuufcsbiclbfvgwc64v2sq",
            "region": "sa-saopaulo-1",
			"model": "meta.llama-3.3-70b-instruct", 
            "oci_apiformat": "GENERIC",  
            "object_list": [
                {"owner": "' || v_owner || '", "name":"TB_RESULT"}
             ],
            "comments": true,
            "temperature": 0.1	
            }'
        );
end;
/

--
--  Testes com SelectAI
--
SELECT DBMS_CLOUD_AI.GENERATE(prompt       =>   'qual foi o time que teve mais vitorias desde 2012?',
                              profile_name => 'PROF_LLAMA_V1',
                              action       => 'showsql') sa


--
-- Exemplo de funcao para contextualizar cenario (pre promopt)
-- Recursos: tratativas de contexto, numero maximo de linhas e existencia de filtros
--
					
--
-- DDL
--						
set serveroutput on 
CREATE OR REPLACE FUNCTION FNC_AI_NL2SQL ( p_prompt in clob,
                                           p_profile in varchar2, 
                                           p_action in varchar2 default 'narrate',
                                           p_limit_rows in number default 100,
                                           p_force_runsql in varchar2 default 'N'
                                           )
return clob
as
 v_response clob;
 v_pre_prompt_geral clob;
 v_pre_prompt_contexto clob;
 v_contexto clob;
 
 v_categoria varchar2(200);
 v_profile varchar2(200);
 
 v_estimated_rows number;
 --
 -- Limite de linhas que pode ser narrado
 --
 v_limit_rows number := p_limit_rows;
 --
 -- caso numero de linhas seja muito alto (definido por v_limit_rows), a acao narrate sera alterada para runwsql automaticamente
 --
 v_force_runsql varchar2(1) := upper(p_force_runsql);
begin

v_pre_prompt_geral := 'Regra geral: 
Toda interação deve prezar pela cordialidade, respeito às pessoas e inclusão.
Não são permitidos conteúdos discriminatórios, preconceituosos ou que promovam qualquer tipo de exclusão baseada em raça, cor, religião, gênero, orientação sexual, idade, nacionalidade, 
deficiência ou outras características protegidas por lei.
As respostas devem estar em conformidade com as leis brasileiras (PT-BR) e alinhadas com os valores corporativos, incluindo as políticas de ética, compliance e privacidade.
Evite fornecer respostas que possam infringir direitos autorais, marcas registradas, patentes ou outros direitos de propriedade intelectual.
Use sempre o idioma português do Brasil (PT-BR), garantindo clareza, acessibilidade e adequação à audiência corporativa.
Evite jargões técnicos sem explicação, a menos que sejam específicos ao público-alvo. 
Nunca responder com códigos, como SQL, nem erros em inglês.
Responda apenas dentro do escopo permitido. Se a solicitação violar alguma diretriz ou envolver informações sensíveis, confidenciais ou de cunho pessoal, 
recuse-se educadamente e oriente o usuário a buscar outros canais apropriados.
Caso as informações fornecidas pelo usuário não sejam suficientes para desenvolver uma busca, peça ao usuário para refinar a busca solicitada.';

	--
	-- Ajustar e definir as categorias existentes. As categorias irao definir pre prompts mais especificos
	--
	SELECT DBMS_CLOUD_AI.GENERATE(prompt =>  'Com base na pergunta: "' || p_prompt || '", defina qual a melhor categoria para ela: "jogos","outros". 
	                                          A resposta deve ser em JSON, e deve seguir este exemplo:  { "categoria": "jogos" }',
											  profile_name => p_profile,
											  action       => 'chat') response
	 INTO v_contexto; 

     SELECT jt.categoria
       INTO v_categoria
       FROM JSON_TABLE(
                        replace(replace(v_contexto,'```',''),'json',''), 
                        '$[*]' COLUMNS (
                            categoria VARCHAR2(50) PATH '$.categoria'
                        ) 
                     ) jt; 
    
    dbms_output.put_line('v_categoria: ' || v_categoria);                         
        
    if v_categoria = 'jogos' then
   
        v_pre_prompt_contexto := 'Regras para Jogos: 
		1. Para descobrir qual time foi vencedor, compare o resultado obtido entre colunas "HG" e "AG"   
		2. Se "HG" for maior que "AG", time vencedor esta citado na coluna "HOME" 
		3. Se "AG" for maior que "HG", time vencedor esta citado na coluna "AWAY"
        4. Se valores de "AG" e "HG" são iguais há "Empate" no jogo. Não considere em analises de vencedores ou perdedores.'; 

        -- pode haver definicao de varios profiles, sendo que cada um estara associado a uma categoria especifica. Neste exemplo, herda da propria chamada 
        v_profile := p_profile;
    
	else

        return 'O prompt informado não faz referência aos dados que podem ser retornados';
			
	end if;

    -- resposta do showsql para analise do comando
    SELECT DBMS_CLOUD_AI.GENERATE(prompt =>  v_pre_prompt_geral || ' ' || v_pre_prompt_contexto || ' ' || p_prompt,
                              profile_name => v_profile,
                              action       => 'showsql') response
      INTO v_response; 
	  
	if v_response like 'SELECT%' then  

			-- estimativa do numero de linahs retornadas
			-- baseado em estatisticas das tabelas e indices 
			BEGIN
				EXECUTE IMMEDIATE 'EXPLAIN PLAN SET STATEMENT_ID = ''plan_selectai'' FOR ' || v_response;
			
				SELECT MAX(cardinality) 
				INTO v_estimated_rows
				FROM plan_table
				WHERE id = 0 
                AND STATEMENT_ID = 'plan_selectai';
			EXCEPTION
			   WHEN OTHERS THEN
				  v_estimated_rows := 0;
			END;

			dbms_output.put_line('v_response: ' || v_response);   
			dbms_output.put_line('v_estimated_rows: ' || v_estimated_rows);  
            dbms_output.put_line('v_limit_rows: ' || v_limit_rows);  
			dbms_output.put_line('v_force_runsql: ' || v_force_runsql);   

			-- validacoes  
			if instr(upper(v_response),'WHERE') = 0 then
			
				return 'O prompt informado não tem nenhum tipo de filtro. Procure adicionar algum critério, como filtros por data, empresa, região, SKU, etc';
			
			elsif v_estimated_rows > v_limit_rows then
			
				if lower(p_action) = 'narrate' and v_force_runsql = 'Y' then
				
					-- chamada principal do SelectAI  
					SELECT DBMS_CLOUD_AI.GENERATE(prompt =>  v_pre_prompt_geral || ' ' || v_pre_prompt_contexto || ' ' || p_prompt,
											  profile_name => v_profile,
											  action       => 'runsql') response
					 INTO v_response; 
				  
				   return v_response;
				   
				else
			
					 return 'Estimativa de linhas retornadas: ' || v_estimated_rows || '. Procure adicionar algum critério, como filtros por data, empresa, região, SKU, etc';
				
				end if;
				
			else

				if p_action <> 'showsql' then
					-- chamada principal do SelectAI  
					SELECT DBMS_CLOUD_AI.GENERATE(prompt =>  v_pre_prompt_geral || ' ' || v_pre_prompt_contexto || ' ' || p_prompt,
											  profile_name => v_profile,
											  action       => p_action) response
					  INTO v_response; 
				end if;
				
				return v_response;
				
			end if;    
			
	else

		return 'Não foi possível gerar uma consulta para atender sua questão. Faça ajustes, adicione mais detalhes, filtros, e tente novamente';
					
	end if;	

end;
--
-- Executando funcao com pre prompt
--
select FNC_AI_NL2SQL( p_prompt => 'qual foi o time que teve mais vitorias desde 2012?',
                        p_profile => 'PROF_LLAMA_V1',    
                        p_action => 'NARRATE',
                        p_limit_rows => 100,
                        p_force_runsql => 'N'
                        );

                              
--
-- Outra forma de usar: exclusiva para SqlPlus, SQLCL, SQL Developer, Ferramentas como PLSQL Developer Allround Automations, Toad.
-- 
-- Nao pode ser usado em consoles Web como SQL Web (Autonomous), SQL Command Window (APEX)
--
BEGIN DBMS_CLOUD_AI.set_profile('PROF_LLAMA_V1'); END;

select ai showsql 'quais os 3 times que tiveram mais vitórias desde 2015?'


	

